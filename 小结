1.在main.js中引入css样式,写整体的样式
2.在插件components下面新建一个组件，在App.vue下面引入组件
3.elemnet-ui  安装element-plus  npm install element-plus --save  vue3使用
   在main.js里面引入element包
   element-plus默认使用英语，想要使用其他语言可以进行多语言设置
   在边框里面设置sortable实现排序
后台技术栈：使用springboot+mybatis-plus这是现在最简单的方法，不需要sql,兼容mybatis的框架，使用默认自带的
创建common这是后台配置类的包
result是后台返回给前台的包装类


先引入依赖，在进行配置，再写接口
创建一个entity的包，创建User类 ，java对象来跟数据库进行一一对应
如果是使用的是Mybatis-p这个插件需要引入一个TableName的注解与数据库的表进行一一对应 我们是使用lombok,

前后台数据交互的接口  Usercontroller  前台可以将数据传给后台保存，后台可以从数据库将数据返回给前台
启动类，通过Application类来启动后台的springboot的工程，然后对外提供接口，前台可以访问  post接口就是前台可以把用户的json数据传过来，在这个接口可以接收到，
通过类来实现 ，然后通过insert方法把它插入到数据库里面
在home中实现form数据的交互，使用axios从前台把数据传入到后台，再通过后台插入到数据库，前台在input里面输入数据时，会将数据通过form来绑定属性的值，form自动存入属性的值，
最后变成json,在我们.save的时候通过save方法来请求form对象

解决跨域的方法  在vue->新建文件vue.config.js 试一下前端跨域或者后端跨域

再传到后台之前有个API接口来进行数据来进行交互，常用的API有axios和fetch，前台写了一个request封装类来请求前台的数据，
然后在home里面通过save方法里面的post将参数的结果传递给后端，将form对象传到后台， 请求后台引入user数据

下一步就是将后台的数据传到前台进行前台渲染，在后台写接口

Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。
Hutool中的工具方法来自每个用户的精雕细琢，它涵盖了Java开发底层代码中的方方面面，它既是大型项目开发中解决小问题的利器，也是小型项目中的效率担当；
Hutool是项目中“util”包友好的替代，它节省了开发人员对项目中公用类和公用工具方法的封装时间，使开发专注于业务，同时可以最大限度的避免封装不完善带来的bug。


在前台进行查询 在页面的输入框中 输入关键字  点击查询 给查询按钮方法  clearable可以给新增的内容删除

App.vue不适合作为后台框架来使用，登录页面应该是一个独立的页面，不应该嵌入在后台的主页里面，这是不合理的，所以需要独立来写
